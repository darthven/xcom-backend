openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/appshop/xcom/1.0.0
info:
  description: "E-Com generic wrapper"
  version: "1.0.0"
  title: X-Com API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: vadym@theappshop.eu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
- name: categories
- name: products
- name: stores
- name: regions
- name: stations
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
paths:
  '/api/categories':
    get:
      tags:
      - categories
      summary: Gets categories
      operationId: getCategories
      parameters:
      - in: query
        name: query
        description: search query
        schema:
          type: string
      responses:
        '200':
          description: list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: request validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  '/api/categories/{id}':
    get:
      tags:
      - categories
      summary: Get category by id
      operationId: getCategoryById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  '/api/goods':
    get:
      tags:
      - products
      summary: Get goods list
      operationId: getGoods
      parameters:
      - in: query
        name: region
        description: region code
        required: true
        schema:
          type: integer
      - in: query
        explode: true
        name: SkipTake
        schema:
          $ref: '#/components/schemas/SkipTake'
      - in: query
        name: ProductFilter
        explode: true
        schema:
          $ref: '#/components/schemas/ProductFilter'
      responses:
        '200':
          description: list of goods in data field, with additional information. length - size of filtered collection, categories - all categories where the filtered results can be found, density - array of price density chart.
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                    example: 1243
                  categories:
                    type: array
                    items:
                      type: integer
                      example: [12, 22, 56, 34]
                  density:
                    type: array
                    items:
                      $ref: '#/components/schemas/DensityPoint'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          description: request validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  '/api/goods/by/ids':
    get:
      tags:
      - products
      summary: Get goods by ids
      operationId: getGoodsByIds
      parameters:
      - in: query
        name: ids
        description: array of product ids
        required: true
        schema:
          type: array
          items:
            type: integer
      - in: query
        name: region
        description: region code
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: list of goods filtered by ids
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: region is missed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  '/api/goods/{id}':
    get:
      tags:
      - products
      summary: Get detailed product
      operationId: getProduct
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      - in: query
        name: region
        description: region code
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedProduct'
        '400':
          description: region is missed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: good not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  '/api/stores':
    get:
      tags:
      - stores
      summary: Get stores
      operationId: getStores
      parameters:
      - in: query
        name: StoreFilter
        schema:
          $ref: '#/components/schemas/StoreFilter'
      responses:
        '200':
          description: array of stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '400':
          description: region is probably missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  '/api/stores/{id}':
    get:
      tags:
      - stores
      summary: Get store by id
      operationId: getStoreById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'

        '404':
          description: store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  '/api/stores/get/types':
    get:
      tags:
      - stores
      summary: Get store types
      operationId: getStoreGetTypes
      responses:
        '200':
          description: return array of all store types with name and count of stores presented in that type
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: 'Аптека'
                    count:
                      type: integer
                      example: 1437

  '/api/regions':
    get:
      tags:
      - regions
      summary: Get regions
      operationId: getRegions
      responses:
        '200':
          description: array of regions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
  '/api/regions/{id}':
    get:
      tags:
      - regions
      summary: Get region by id
      operationId: getRegionsById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: region with id and name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'

        '404':
          description: region not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  '/api/stations':
    get:
      tags:
      - stations
      summary: Get stations
      operationId: getStations
      responses:
        '200':
          description: array of all metro stations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
  '/api/stations/{id}':
    get:
      tags:
      - stations
      summary: Get stations
      operationId: getStationById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: station with id, name, location and city information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'

        '404':
          description: region not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


components:
  schemas:
    Category:
      type: object
      required:
      - id
      - name
      - level
      - parentId
      - productCount
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Лекарства и БАД
        level:
          type: integer
          example: 0
          description: Level of the catagory in hierarchy
        parentId:
          type: integer
          example: 0
          description: Parent id or 0
        productCount:
          type: integer
          example: 69
    Product:
      type: object
      required:
      - id
      - name
      - manufacturer
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Лекарства и БАД
        manufacturer:
          type: string
          example: Дивеево
        priceMin:
          type: number
          format: double
          example: 199.99
          description: min price accross locations in current region
        priceMax:
          type: number
          format: double
          example: 299.99
        categoryId:
          type: integer
          description: category id
    DetailedProduct:
      allOf:
      - $ref: '#/components/schemas/Product'
      - type: object
        properties:
          availableCount: # OPTIONAL in first release
            type: integer
            description: The highest availability across the locations in the current region
    Store:
      type: object
      required:
      - region
      - address
      properties:
        region:
          type: integer
          description: region id
        type:
          type: string
          description: Тип склада (Аптека, Оптика и т.д.)
        address:
          type: string
        phone:
          type: string
        workTime:
          type: string
          description: hours of operation
        location:
          $ref: '#/components/schemas/GeoPoint'
        stations:
          type: array
          items:
            $ref: '#/components/schemas/StoreStation'
    StoreStation:
      type: object
      properties:
        id:
          type: integer
          example: 261
        name:
          type: string
          example: 'Купчино'
        location:
          $ref: '#/components/schemas/GeoPoint'
        distance:
          type: number
          format: double
          example: 2.7135164951248125
    Station:
      type: object
      properties:
        id:
          type: integer
          example: 261
        name:
          type: string
          example: 'Купчино'
        location:
          $ref: '#/components/schemas/GeoPoint'
        city:
          type: string
          example: 'Москва'
    Region:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
          example: 77
        name:
          type: string
          example: Москва


    GeoPoint:
      type: object
      properties:
        lat:
          type: number
          format: double
          example: 59.82971529999999
        lng:
          type: number
          format: double
          example: 30.3754302
    DensityPoint:
      type: object
      properties:
        value:
          type: number
          example: 100
        count:
          type: number
          example: 76

    ProductFilter:
      type: object
      properties:
        query:
          type: string
          example: "Анальг"
          description: search query
        categories:
          type: integer
          example: [32, 22]
          description: category ids or null to search all
        labelCategoryId:
          type: integer
          description: id of label category to search or 0
        priceMin:
          type: number
          format: double
          example: 250.0
        priceMax:
          type: number
          format: double
          example: 250.0
        order:
          type: string
          enum: [asc, desc]
        sort:
          type: string
          enum: [top, price, name]
    StoreFilter:
      type: object
      required:
      - region
      properties:
        region:
          type: integer
          description: region id
        type:
          type: string
    SkipTake:
      type: object
      properties:
        skip:
          type: integer
        take:
          type: integer

    NotFoundError:
      type: object
      properties:
        name:
          type: string
          example: 'NotFoundError'
        message:
          type: string
          example: 'smth not found'
    BadRequestError:
      type: object
      properties:
        name:
          type: string
          example: 'BadRequestError'
        message:
          type: string
          example: "Invalid state, check 'errors' property for more info."
        errors:
          type: array
          items:
            type: object
            properties: {}
        paramName:
          type: string
          example: 'locationFilter'
